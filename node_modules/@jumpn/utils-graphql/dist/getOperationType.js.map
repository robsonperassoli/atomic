{"version":3,"file":"getOperationType.js","sources":["../src/getOperationType.js"],"sourcesContent":["// @flow\n\nimport type {GqlOperationType} from \"./types\";\n\nconst operationTypeRe = /^\\s*(query|mutation|subscription|\\{)/;\n\nconst getOperationTypeFromMatched = (matched: string): GqlOperationType =>\n  matched === \"{\" ? \"query\" : (matched: any);\n\n/**\n * Returns the type (query, mutation, or subscription) of the given operation\n *\n * @example\n *\n * const operation = `\n *   subscription userSubscription($userId: ID!) {\n *     user(userId: $userId) {\n *       id\n *       name\n *     }\n *   }\n * `;\n *\n * const operationType = getOperationType(operation);\n *\n * console.log(operationType); // \"subscription\"\n */\nconst getOperationType = (operation: string): GqlOperationType => {\n  const result = operation.match(operationTypeRe);\n\n  if (!result) {\n    throw new TypeError(`Invalid operation:\\n${operation}`);\n  }\n\n  return getOperationTypeFromMatched(result[1]);\n};\n\nexport default getOperationType;\n"],"names":["operationTypeRe","getOperationTypeFromMatched","matched","getOperationType","operation","result","match","TypeError"],"mappings":";;;;;;AAIA,IAAMA,eAAe,GAAG,sCAAxB;;AAEA,IAAMC,2BAA2B,GAAG,qCAACC,OAAD;;;SAClCA,OAAO,KAAK,GAAZ,GAAkB,OAAlB,GAA6BA,OADK;CAAH,gBAAjC;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAMC,gBAAgB,GAAG,0BAACC,SAAD,EAAyC;;;MAC1DC,MAAM,GAAGD,SAAS,CAACE,KAAV,CAAgBN,eAAhB,CAAf;;MAEI,CAACK,MAAL,EAAa;UACL,IAAIE,SAAJ,+BAAqCH,SAArC,EAAN;;;SAGKH,2BAA2B,CAACI,MAAM,CAAC,CAAD,CAAP,CAAlC;CAPoB,gBAAtB;;;;"}
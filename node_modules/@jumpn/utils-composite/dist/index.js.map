{"version":3,"file":"index.js","sources":["../src/get.js","../src/is.js","../src/getIn.js","../src/getKeys.js","../src/hasIn.js","../src/hasKey.js","../src/haveSameProps.js","../src/isEmpty.js","../src/map.js","../src/remove.js","../src/shallowCopy.js","../src/updateIn.js","../src/removeIn.js","../src/set.js","../src/setIn.js","../src/shallowEqual.js","../src/toUndefinedIfEmpty.js"],"sourcesContent":["// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport type {Composite, Key} from \"./types\";\n\n/**\n * Get property value of given key.\n */\nconst get = (key: Key, composite: Composite): any => composite[(key: any)];\n\nexport default curry(get);\n","// @flow\n\n// TODO: use @jumpn/utils-object {is} once it is available\nconst isObject = thing => thing !== null && typeof thing === \"object\";\n\n/**\n * Returns true if parameter is a Composite or false otherwise\n */\nconst is = (thing: mixed) => Array.isArray(thing) || isObject(thing);\n\nexport default is;\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\nimport {isLastIndex} from \"@jumpn/utils-array\";\n\nimport get from \"./get\";\nimport isComposite from \"./is\";\n\nimport type {Composite, Path} from \"./types\";\n\nconst getInIfNeeded = (index, path, value) =>\n  isLastIndex(path, index) ? value : getInRecur(index + 1, path, value);\n\nconst getNotCompositeErrorMessage = (index, path, maybeComposite) =>\n  `Expected to find a composite at [${path.join(\", \")}][${index}], ` +\n  `but instead got: ${typeof maybeComposite}`;\n\nconst ensureIsComposite = (index, path, maybeComposite) => {\n  if (isComposite(maybeComposite)) return maybeComposite;\n\n  throw new Error(getNotCompositeErrorMessage(index, path, maybeComposite));\n};\n\nconst getInRecur = (index, path, maybeComposite) =>\n  maybeComposite === undefined\n    ? undefined\n    : getInIfNeeded(\n        index,\n        path,\n        get(path[index], ensureIsComposite(index, path, maybeComposite))\n      );\n\n/**\n * Returns value located at the given path or undefined otherwise.\n */\nconst getIn = (path: Path, composite: Composite): any =>\n  path.length === 0 ? undefined : getInRecur(0, path, composite);\n\nexport default curry(getIn);\n","// @flow\n\nimport type {Composite, Key} from \"./types\";\n\n/**\n * Get own enumerable keys.\n */\nconst getKeys = (composite: Composite): Array<Key> =>\n  Array.isArray(composite) ? [...composite.keys()] : Object.keys(composite);\n\nexport default getKeys;\n","// @flow\n\nimport isDeepEqual from \"fast-deep-equal\";\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport getIn from \"./getIn\";\n\nimport type {Composite, Path} from \"./types\";\n\n/**\n * Returns true if value located at given path is deeply equal to the one\n * specified.\n */\nconst hasIn = (path: Path, value: mixed, composite: Composite): boolean =>\n  isDeepEqual(getIn(path, composite), value);\n\nexport default curry(hasIn);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport type {Composite, Key} from \"./types\";\n\n/**\n * Returns true if key is included in composite's own enumerable ones,\n * or false otherwise.\n */\nconst hasKey = (key: Key, composite: Composite): boolean =>\n  Object.prototype.hasOwnProperty.call(composite, key);\n\nexport default curry(hasKey);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport get from \"./get\";\nimport getKeys from \"./getKeys\";\nimport hasKey from \"./hasKey\";\n\nimport type {Composite} from \"./types\";\n\n/**\n * Returns true if both composites have the same props or false otherwise.\n */\nconst haveSameProps = (c1: Composite, c2: Composite): boolean => {\n  const keys1 = getKeys(c1);\n\n  return (\n    keys1.length === getKeys(c2).length &&\n    keys1.every(k1 => hasKey(k1, c2) && get(k1, c1) === get(k1, c2))\n  );\n};\n\nexport default curry(haveSameProps);\n","// @flow\n\nimport getKeys from \"./getKeys\";\n\nimport type {Composite} from \"./types\";\n\n/**\n * Returns true if composite has no own enumerable keys (is empty) or false\n * otherwise\n */\nconst isEmpty = (composite: Composite): boolean =>\n  getKeys(composite).length === 0;\n\nexport default isEmpty;\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport type {Composite, Key} from \"./types\";\n\nconst mapObject = (mapper, object) =>\n  Object.entries(object).reduce(\n    (result, [key, value]) => ({\n      ...result,\n      [key]: mapper(value, key, object)\n    }),\n    {}\n  );\n\n/**\n * Maps values of the given composite using mapper\n */\nconst map = <C: Composite>(\n  mapper: (value: any, key: Key, composite: $Supertype<C>) => any,\n  composite: C\n): $Supertype<C> =>\n  Array.isArray(composite)\n    ? composite.map(mapper)\n    : mapObject(mapper, composite);\n\nexport default curry(map);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport type {Composite, Key} from \"./types\";\n\n// $FlowFixMe: flow does not understand the following construction\nconst objectRemove = (key, {[key]: removed, ...rest}) => rest;\n\n/**\n * Returns a new composite with the result of having removed the property with\n * the given key.\n */\nconst remove = (key: Key, composite: Composite): Composite =>\n  Array.isArray(composite)\n    ? arrayRemove((key: any), 1, composite)\n    : objectRemove(key, composite);\n\nexport default curry(remove);\n","// @flow\n\nimport type {Composite} from \"./types\";\n\n/**\n * Returns a new composite with the same own enumerable props of the one given.\n */\nconst shallowCopy = <C: Composite>(composite: C): C =>\n  Array.isArray(composite) ? [...composite] : {...composite};\n\nexport default shallowCopy;\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\nimport {isLastIndex} from \"@jumpn/utils-array\";\n\nimport get from \"./get\";\nimport hasKey from \"./hasKey\";\nimport remove from \"./remove\";\nimport shallowCopy from \"./shallowCopy\";\n\nimport type {Composite, Path} from \"./types\";\n\nconst createReduceContext = composite => {\n  const origin = shallowCopy(composite);\n\n  return {origin, current: origin, previous: undefined};\n};\n\nconst set = (key, value, composite) => {\n  // eslint-disable-next-line no-param-reassign\n  composite[(key: any)] = value;\n\n  return get(key, composite);\n};\n\nconst updateSet = (path, index, value, context) => ({\n  ...context,\n  current: set(path[index], value, context.current),\n  previous: context.current\n});\n\nconst updateRemove = (path, index, context) => {\n  const removed = remove(path[index], context.current);\n\n  return index === 0\n    ? {...context, current: removed, origin: removed}\n    : {\n        ...context,\n        previous: set(path[index - 1], removed, (context.previous: any))\n      };\n};\n\nconst removeAction = Symbol(\"composite.updateIn.removeAction\");\n\nconst update = (path, index, value, context) =>\n  value === removeAction\n    ? updateRemove(path, index, context)\n    : updateSet(path, index, value, context);\n\nconst createSupporting = key => (typeof key === \"number\" ? [] : {});\n\nconst copyOrCreate = (key, nextKey, current) =>\n  hasKey(key, current)\n    ? shallowCopy(get(key, current))\n    : createSupporting(nextKey);\n\nconst getNext = (path, updater, index, current) =>\n  isLastIndex(path, index)\n    ? updater(get(path[index], current))\n    : copyOrCreate(path[index], path[index + 1], current);\n\nconst getReducer = (path, updater) => (context, key, index) =>\n  update(path, index, getNext(path, updater, index, context.current), context);\n\n/**\n * Returns a new composite with the result of having updated the property value\n * at the given path with the result of the call to updater function.\n * \n * Entry removal is supported by returning `updateIn.remove` symbol on updater\n * function.\n */\nconst updateIn = (\n  path: Path,\n  updater: (prev: any) => any,\n  composite: Composite\n): Composite =>\n  path.length === 0\n    ? composite\n    : path.reduce(getReducer(path, updater), createReduceContext(composite))\n        .origin;\n\n// we are doing this way and not returning an Object.assign construction, as\n// that is not well typed (returns any)\nconst updateInCurried = curry(updateIn);\n\nupdateInCurried.remove = removeAction;\n\nexport default updateInCurried;\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport updateIn from \"./updateIn\";\n\nimport type {Composite, Path} from \"./types\";\n\nconst remove = () => updateIn.remove;\n\n/**\n * Returns a new composite with the result of having removed the property\n * located at the given path.\n * \n * (This does the same as calling **updateIn** with updater:\n * `() => updateIn.remove`)\n */\nconst removeIn = (path: Path, composite: Composite): Composite =>\n  updateIn(path, remove, composite);\n\nexport default curry(removeIn);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport shallowCopy from \"./shallowCopy\";\n\nimport type {Composite, Key} from \"./types\";\n\n/**\n * Returns a new composite with the result of having updated the property with\n * the given key with the specified value.\n */\nconst set = (key: Key, value: mixed, composite: Composite): Composite => {\n  const copy = shallowCopy(composite);\n\n  copy[(key: any)] = value;\n\n  return copy;\n};\n\nexport default curry(set);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport updateIn from \"./updateIn\";\n\nimport type {Composite, Path} from \"./types\";\n\n/**\n * Returns a new composite with the result of having updated the property\n * located at the given path with the specified value.\n * \n * (This does the same as calling **updateIn** with updater: `() => value`)\n */\nconst setIn = (path: Path, value: mixed, composite: Composite): Composite =>\n  updateIn(path, () => value, composite);\n\nexport default curry(setIn);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport haveSameProps from \"./haveSameProps\";\n\nimport type {Composite} from \"./types\";\n\n// eslint-disable-next-line no-bitwise\nconst xor = (cond1, cond2) => Boolean(Number(cond1) ^ Number(cond2));\n\n/**\n * Returns true if both composites are of the same type (Array or Object) and\n * their properties are strictly equal.\n */\nconst shallowEqual = (c1: Composite, c2: Composite): boolean =>\n  c1 === c2 ||\n  (!xor(Array.isArray(c1), Array.isArray(c2)) && haveSameProps(c1, c2));\n\nexport default curry(shallowEqual);\n","// @flow\n\nimport isEmpty from \"./isEmpty\";\n\nimport type {Composite} from \"./types\";\n\n/**\n * Returns given composite if it has any own enumerable keys (is not empty) or\n * undefined otherwise\n *\n * @param {Composite} composite\n * \n * @returns {Composite}\n */\nconst toUndefinedIfEmpty = <C: Composite>(composite: C): void | C =>\n  isEmpty(composite) ? undefined : composite;\n\nexport default toUndefinedIfEmpty;\n"],"names":["get","key","composite","curry","isObject","thing","is","Array","isArray","getInIfNeeded","index","path","value","isLastIndex","getInRecur","getNotCompositeErrorMessage","maybeComposite","join","ensureIsComposite","isComposite","Error","undefined","getIn","length","getKeys","keys","_Object$keys","hasIn","isDeepEqual","hasKey","Object","prototype","hasOwnProperty","call","haveSameProps","c1","c2","keys1","every","k1","isEmpty","mapObject","mapper","object","_Object$entries","reduce","result","map","objectRemove","rest","remove","arrayRemove","shallowCopy","createReduceContext","origin","current","previous","set","updateSet","context","updateRemove","removed","removeAction","_Symbol","update","createSupporting","copyOrCreate","nextKey","getNext","updater","getReducer","updateIn","updateInCurried","removeIn","copy","setIn","xor","cond1","cond2","Boolean","Number","shallowEqual","toUndefinedIfEmpty"],"mappings":"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"}
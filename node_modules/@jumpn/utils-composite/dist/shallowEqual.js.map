{"version":3,"file":"shallowEqual.js","sources":["../src/get.js","../src/getKeys.js","../src/hasKey.js","../src/haveSameProps.js","../src/shallowEqual.js"],"sourcesContent":["// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport type {Composite, Key} from \"./types\";\n\n/**\n * Get property value of given key.\n */\nconst get = (key: Key, composite: Composite): any => composite[(key: any)];\n\nexport default curry(get);\n","// @flow\n\nimport type {Composite, Key} from \"./types\";\n\n/**\n * Get own enumerable keys.\n */\nconst getKeys = (composite: Composite): Array<Key> =>\n  Array.isArray(composite) ? [...composite.keys()] : Object.keys(composite);\n\nexport default getKeys;\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport type {Composite, Key} from \"./types\";\n\n/**\n * Returns true if key is included in composite's own enumerable ones,\n * or false otherwise.\n */\nconst hasKey = (key: Key, composite: Composite): boolean =>\n  Object.prototype.hasOwnProperty.call(composite, key);\n\nexport default curry(hasKey);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport get from \"./get\";\nimport getKeys from \"./getKeys\";\nimport hasKey from \"./hasKey\";\n\nimport type {Composite} from \"./types\";\n\n/**\n * Returns true if both composites have the same props or false otherwise.\n */\nconst haveSameProps = (c1: Composite, c2: Composite): boolean => {\n  const keys1 = getKeys(c1);\n\n  return (\n    keys1.length === getKeys(c2).length &&\n    keys1.every(k1 => hasKey(k1, c2) && get(k1, c1) === get(k1, c2))\n  );\n};\n\nexport default curry(haveSameProps);\n","// @flow\n\nimport {curry} from \"flow-static-land/lib/Fun\";\n\nimport haveSameProps from \"./haveSameProps\";\n\nimport type {Composite} from \"./types\";\n\n// eslint-disable-next-line no-bitwise\nconst xor = (cond1, cond2) => Boolean(Number(cond1) ^ Number(cond2));\n\n/**\n * Returns true if both composites are of the same type (Array or Object) and\n * their properties are strictly equal.\n */\nconst shallowEqual = (c1: Composite, c2: Composite): boolean =>\n  c1 === c2 ||\n  (!xor(Array.isArray(c1), Array.isArray(c2)) && haveSameProps(c1, c2));\n\nexport default curry(shallowEqual);\n"],"names":["get","key","composite","curry","getKeys","Array","isArray","keys","_Object$keys","hasKey","Object","prototype","hasOwnProperty","call","haveSameProps","c1","c2","keys1","length","every","k1","xor","cond1","cond2","Boolean","Number","shallowEqual"],"mappings":"mQASMA,IAAM,SAACC,EAAUC,uCAA8BA,EAAWD,uBAEjDE,MAAMH,oBCJfI,QAAU,SAACF,uCACfG,MAAMC,QAAQJ,gCAAiBA,EAAUK,SAAUC,aAAYN,gCCE3DO,OAAS,SAACR,EAAUC,uCACxBQ,OAAOC,UAAUC,eAAeC,KAAKX,EAAWD,0BAEnCE,MAAMM,uBCAfK,cAAgB,SAACC,EAAeC,oCAC9BC,EAAQb,QAAQW,UAGpBE,EAAMC,SAAWd,QAAQY,GAAIE,QAC7BD,EAAME,MAAM,gDAAMV,SAAOW,EAAIJ,IAAOhB,MAAIoB,EAAIL,KAAQf,MAAIoB,EAAIJ,8CAIjDb,MAAMW,4BCbfO,IAAM,SAACC,EAAOC,qCAAUC,QAAQC,OAAOH,GAASG,OAAOF,kBAMvDG,aAAe,SAACX,EAAeC,qCACnCD,IAAOC,IACLK,IAAIhB,MAAMC,QAAQS,GAAKV,MAAMC,QAAQU,KAAQF,gBAAcC,EAAIC,gCAEpDb,MAAMuB"}
{"version":3,"file":"pushRequestUsing.js","sources":["../src/notifier/observer/notifyAll.js","../src/notifier/notify.js","../src/notifier/findIndex.js","../src/notifier/remove.js","../src/updateNotifiers.js","../src/notifier/event/eventNames.js","../src/notifier/event/eventCreators.js","../src/abortNotifier.js","../src/notifier/notifyActive.js","../src/handlePush.js","../src/notifier/find.js","../src/pushAbsintheEvent.js","../src/notifier/refresh.js","../src/refreshNotifier.js","../src/notifier/requestStatuses.js","../src/absinthe-event/absintheEventNames.js","../src/absinthe-event/absintheEventCreators.js","../src/pushRequestUsing.js"],"sourcesContent":["// @flow\n\nimport type {Event, Observer} from \"../types\";\n\nconst getNotifier = (handlerName, payload) => observer =>\n  observer[handlerName] && observer[handlerName](payload);\n\nconst getHandlerName = ({name}) => `on${name}`;\n\nconst notifyAll = <Result, Variables: void | Object>(\n  observers: $ReadOnlyArray<Observer<Result, Variables>>,\n  event: Event\n) => observers.forEach(getNotifier(getHandlerName(event), event.payload));\n\nexport default notifyAll;\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst getObservers = ({activeObservers, canceledObservers}) => [\n  ...activeObservers,\n  ...canceledObservers\n];\n\nconst notify = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(getObservers(notifier), event);\n\n  return notifier;\n};\n\nexport default notify;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst findIndex = (\n  notifiers: Array<Notifier<any, any>>,\n  key: string,\n  value: any\n) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.findIndex(hasIn([key], value));\n\nexport default findIndex;\n","// @flow\n\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"./types\";\n\nconst remove = (notifier: Notifier<any, any>) => (\n  notifiers: Array<Notifier<any, any>>\n) =>\n  arrayRemove(findIndex(notifiers, \"request\", notifier.request), 1, notifiers);\n\nexport default remove;\n","// @flow\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\ntype Notifiers = Array<Notifier<any, any>>;\n\nconst updateNotifiers = (\n  absintheSocket: AbsintheSocket,\n  updater: (notifiers: Notifiers) => Notifiers\n) => {\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n\n  return absintheSocket;\n};\n\nexport default updateNotifiers;\n","// @flow\n\nconst eventNames = {\n  abort: (\"Abort\": \"Abort\"),\n  cancel: (\"Cancel\": \"Cancel\"),\n  error: (\"Error\": \"Error\"),\n  result: (\"Result\": \"Result\"),\n  start: (\"Start\": \"Start\")\n};\n\ntype EventName = $Values<typeof eventNames>;\n\nexport default eventNames;\n\nexport type {EventName};\n","// @flow\n\nimport eventNames from \"./eventNames\";\n\nimport type {\n  AbortEvent,\n  CancelEvent,\n  ErrorEvent,\n  Notifier,\n  ResultEvent,\n  StartEvent\n} from \"../types\";\n\nconst createStartEvent = <Payload: Notifier<any, any>>(\n  payload: Payload\n): StartEvent<Payload> => ({payload, name: eventNames.start});\n\nconst createResultEvent = <Result>(payload: Result): ResultEvent<Result> => ({\n  payload,\n  name: eventNames.result\n});\n\nconst createErrorEvent = (payload: Error): ErrorEvent => ({\n  payload,\n  name: eventNames.error\n});\n\nconst createCancelEvent = (): CancelEvent => ({\n  name: eventNames.cancel,\n  payload: undefined\n});\n\nconst createAbortEvent = (payload: Error): AbortEvent => ({\n  payload,\n  name: eventNames.abort\n});\n\nexport {\n  createStartEvent,\n  createResultEvent,\n  createErrorEvent,\n  createCancelEvent,\n  createAbortEvent\n};\n","// @flow\n\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {createAbortEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst abortNotifier = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  error: Error\n) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifierNotify(notifier, createAbortEvent(error)))\n  );\n\nexport default abortNotifier;\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst notifyActive = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(notifier.activeObservers, event);\n\n  return notifier;\n};\n\nexport default notifyActive;\n","// @flow\n\nimport {Push} from \"phoenix\";\n\nimport type {PushHandler} from \"./types\";\n\nconst handlePush = (push: Push, handler: PushHandler<any>) =>\n  push\n    .receive(\"ok\", handler.onSucceed)\n    .receive(\"error\", handler.onError)\n    .receive(\"timeout\", handler.onTimeout);\n\nexport default handlePush;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst find = (notifiers: Array<Notifier<any, any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.find(hasIn([key], value));\n\nexport default find;\n","// @flow\n\nimport {map} from \"@jumpn/utils-composite\";\n\nimport type {GqlRequest} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport handlePush from \"./handlePush\";\nimport notifierFind from \"./notifier/find\";\n\nimport type {AbsintheEvent} from \"./absinthe-event/types\";\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\n\nconst getPushHandlerMethodGetter = (absintheSocket, request) => handle => (\n  ...args\n) => {\n  const notifier = notifierFind(absintheSocket.notifiers, \"request\", request);\n\n  if (notifier) {\n    handle(absintheSocket, notifier, ...args);\n  }\n};\n\nconst getPushHandler = (absintheSocket, request, notifierPushHandler) =>\n  map(getPushHandlerMethodGetter(absintheSocket, request), notifierPushHandler);\n\nconst pushAbsintheEvent = <Variables: void | Object, Response: Object>(\n  absintheSocket: AbsintheSocket,\n  request: GqlRequest<Variables>,\n  notifierPushHandler: NotifierPushHandler<Response>,\n  absintheEvent: AbsintheEvent\n) => {\n  handlePush(\n    absintheSocket.channel.push(absintheEvent.name, absintheEvent.payload),\n    getPushHandler(absintheSocket, request, notifierPushHandler)\n  );\n\n  return absintheSocket;\n};\n\nexport default pushAbsintheEvent;\n","// @flow\n\nimport {replace as arrayReplace} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"./types\";\n\nconst refresh = (notifier: Notifier<any, any>) => (\n  notifiers: Array<Notifier<any, any>>\n) =>\n  arrayReplace(\n    findIndex(notifiers, \"request\", notifier.request),\n    [notifier],\n    notifiers\n  );\n\nexport default refresh;\n","// @flow\n\nimport notifierRefresh from \"./notifier/refresh\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst refreshNotifier = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>\n) => {\n  updateNotifiers(absintheSocket, notifierRefresh(notifier));\n\n  return notifier;\n};\n\nexport default refreshNotifier;\n","// @flow\n\nconst requestStatuses = {\n  canceled: (\"canceled\": \"canceled\"),\n  canceling: (\"canceling\": \"canceling\"),\n  pending: (\"pending\": \"pending\"),\n  sent: (\"sent\": \"sent\"),\n  sending: (\"sending\": \"sending\")\n};\n\ntype RequestStatus = $Values<typeof requestStatuses>;\n\nexport default requestStatuses;\n\nexport type {RequestStatus};\n","// @flow\n\nconst absintheEventNames = {\n  doc: (\"doc\": \"doc\"),\n  unsubscribe: (\"unsubscribe\": \"unsubscribe\")\n};\n\ntype AbsintheEventName = $Values<typeof absintheEventNames>;\n\nexport default absintheEventNames;\n\nexport type {AbsintheEventName};\n","// @flow\n\nimport absintheEventNames from \"./absintheEventNames\";\n\nimport type {AbsintheDocEvent, AbsintheUnsubscribeEvent} from \"./types\";\n\nconst createAbsintheUnsubscribeEvent = (\n  payload: $ElementType<AbsintheUnsubscribeEvent, \"payload\">\n): AbsintheUnsubscribeEvent => ({\n  payload,\n  name: absintheEventNames.unsubscribe\n});\n\nconst createAbsintheDocEvent = <Variables: void | Object>(\n  payload: $ElementType<AbsintheDocEvent<Variables>, \"payload\">\n): AbsintheDocEvent<Variables> => ({\n  payload,\n  name: absintheEventNames.doc\n});\n\nexport {createAbsintheDocEvent, createAbsintheUnsubscribeEvent};\n","// @flow\n\nimport {requestToCompat} from \"@jumpn/utils-graphql\";\n\nimport abortNotifier from \"./abortNotifier\";\nimport notifierNotifyActive from \"./notifier/notifyActive\";\nimport pushAbsintheEvent from \"./pushAbsintheEvent\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport {createAbsintheDocEvent} from \"./absinthe-event/absintheEventCreators\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst pushAbsintheDocEvent = (absintheSocket, {request}, notifierPushHandler) =>\n  pushAbsintheEvent(\n    absintheSocket,\n    request,\n    notifierPushHandler,\n    createAbsintheDocEvent(requestToCompat(request))\n  );\n\nconst setNotifierRequestStatusSending = (absintheSocket, notifier) =>\n  refreshNotifier(absintheSocket, {\n    ...notifier,\n    requestStatus: requestStatuses.sending\n  });\n\nconst createRequestError = message => new Error(`request: ${message}`);\n\nconst onTimeout = (absintheSocket, notifier) =>\n  notifierNotifyActive(\n    notifier,\n    createErrorEvent(createRequestError(\"timeout\"))\n  );\n\nconst onError = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  errorMessage: string\n) => abortNotifier(absintheSocket, notifier, createRequestError(errorMessage));\n\nconst getNotifierPushHandler = onSucceed => ({onError, onSucceed, onTimeout});\n\nconst pushRequestUsing = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  onSucceed: $ElementType<NotifierPushHandler<any>, \"onSucceed\">\n) =>\n  pushAbsintheDocEvent(\n    absintheSocket,\n    setNotifierRequestStatusSending(absintheSocket, notifier),\n    getNotifierPushHandler(onSucceed)\n  );\n\nexport {pushRequestUsing as default, onError};\n"],"names":["getNotifier","handlerName","payload","observer","getHandlerName","name","notifyAll","observers","event","forEach","getObservers","activeObservers","canceledObservers","notify","notifier","observerNotifyAll","findIndex","notifiers","key","value","hasIn","remove","arrayRemove","request","updateNotifiers","absintheSocket","updater","eventNames","abort","cancel","error","result","start","createStartEvent","createResultEvent","createErrorEvent","createCancelEvent","undefined","createAbortEvent","abortNotifier","notifierRemove","notifierNotify","notifyActive","handlePush","push","handler","receive","onSucceed","onError","onTimeout","find","getPushHandlerMethodGetter","handle","notifierFind","args","getPushHandler","notifierPushHandler","map","pushAbsintheEvent","absintheEvent","channel","refresh","arrayReplace","refreshNotifier","notifierRefresh","requestStatuses","canceled","canceling","pending","sent","sending","absintheEventNames","doc","unsubscribe","createAbsintheUnsubscribeEvent","createAbsintheDocEvent","pushAbsintheDocEvent","requestToCompat","setNotifierRequestStatusSending","requestStatus","createRequestError","message","Error","notifierNotifyActive","errorMessage","getNotifierPushHandler","pushRequestUsing"],"mappings":"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"}
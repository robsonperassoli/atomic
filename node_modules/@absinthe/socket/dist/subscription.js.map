{"version":3,"file":"subscription.js","sources":["../src/notifier/observer/notifyAll.js","../src/notifier/notify.js","../src/notifier/findIndex.js","../src/notifier/remove.js","../src/updateNotifiers.js","../src/notifier/event/eventNames.js","../src/notifier/event/eventCreators.js","../src/abortNotifier.js","../src/notifier/find.js","../src/notifier/notifyCanceled.js","../src/notifier/flushCanceled.js","../src/notifier/notifyActive.js","../src/notifier/notifyResultEvent.js","../src/notifier/notifyStartEvent.js","../src/notifier/requestStatuses.js","../src/notifier/reset.js","../src/handlePush.js","../src/pushAbsintheEvent.js","../src/notifier/refresh.js","../src/refreshNotifier.js","../src/absinthe-event/absintheEventNames.js","../src/absinthe-event/absintheEventCreators.js","../src/pushRequestUsing.js","../src/subscription.js"],"sourcesContent":["// @flow\n\nimport type {Event, Observer} from \"../types\";\n\nconst getNotifier = (handlerName, payload) => observer =>\n  observer[handlerName] && observer[handlerName](payload);\n\nconst getHandlerName = ({name}) => `on${name}`;\n\nconst notifyAll = <Result, Variables: void | Object>(\n  observers: $ReadOnlyArray<Observer<Result, Variables>>,\n  event: Event\n) => observers.forEach(getNotifier(getHandlerName(event), event.payload));\n\nexport default notifyAll;\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst getObservers = ({activeObservers, canceledObservers}) => [\n  ...activeObservers,\n  ...canceledObservers\n];\n\nconst notify = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(getObservers(notifier), event);\n\n  return notifier;\n};\n\nexport default notify;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst findIndex = (\n  notifiers: Array<Notifier<any, any>>,\n  key: string,\n  value: any\n) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.findIndex(hasIn([key], value));\n\nexport default findIndex;\n","// @flow\n\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"./types\";\n\nconst remove = (notifier: Notifier<any, any>) => (\n  notifiers: Array<Notifier<any, any>>\n) =>\n  arrayRemove(findIndex(notifiers, \"request\", notifier.request), 1, notifiers);\n\nexport default remove;\n","// @flow\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\ntype Notifiers = Array<Notifier<any, any>>;\n\nconst updateNotifiers = (\n  absintheSocket: AbsintheSocket,\n  updater: (notifiers: Notifiers) => Notifiers\n) => {\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n\n  return absintheSocket;\n};\n\nexport default updateNotifiers;\n","// @flow\n\nconst eventNames = {\n  abort: (\"Abort\": \"Abort\"),\n  cancel: (\"Cancel\": \"Cancel\"),\n  error: (\"Error\": \"Error\"),\n  result: (\"Result\": \"Result\"),\n  start: (\"Start\": \"Start\")\n};\n\ntype EventName = $Values<typeof eventNames>;\n\nexport default eventNames;\n\nexport type {EventName};\n","// @flow\n\nimport eventNames from \"./eventNames\";\n\nimport type {\n  AbortEvent,\n  CancelEvent,\n  ErrorEvent,\n  Notifier,\n  ResultEvent,\n  StartEvent\n} from \"../types\";\n\nconst createStartEvent = <Payload: Notifier<any, any>>(\n  payload: Payload\n): StartEvent<Payload> => ({payload, name: eventNames.start});\n\nconst createResultEvent = <Result>(payload: Result): ResultEvent<Result> => ({\n  payload,\n  name: eventNames.result\n});\n\nconst createErrorEvent = (payload: Error): ErrorEvent => ({\n  payload,\n  name: eventNames.error\n});\n\nconst createCancelEvent = (): CancelEvent => ({\n  name: eventNames.cancel,\n  payload: undefined\n});\n\nconst createAbortEvent = (payload: Error): AbortEvent => ({\n  payload,\n  name: eventNames.abort\n});\n\nexport {\n  createStartEvent,\n  createResultEvent,\n  createErrorEvent,\n  createCancelEvent,\n  createAbortEvent\n};\n","// @flow\n\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {createAbortEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst abortNotifier = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  error: Error\n) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifierNotify(notifier, createAbortEvent(error)))\n  );\n\nexport default abortNotifier;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst find = (notifiers: Array<Notifier<any, any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.find(hasIn([key], value));\n\nexport default find;\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst notifyCanceled = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(notifier.canceledObservers, event);\n\n  return notifier;\n};\n\nexport default notifyCanceled;\n","// @flow\n\nimport notifyCanceled from \"./notifyCanceled\";\nimport {createCancelEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst clearCanceled = notifier => ({\n  ...notifier,\n  canceledObservers: []\n});\n\nconst flushCanceled = <Result: any, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) =>\n  notifier.canceledObservers.length > 0\n    ? clearCanceled(notifyCanceled(notifier, createCancelEvent()))\n    : notifier;\n\nexport default flushCanceled;\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst notifyActive = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(notifier.activeObservers, event);\n\n  return notifier;\n};\n\nexport default notifyActive;\n","// @flow\n\nimport notifyActive from \"./notifyActive\";\nimport {createResultEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst notifyResultEvent = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  result: Result\n) => notifyActive(notifier, createResultEvent(result));\n\nexport default notifyResultEvent;\n","// @flow\n\nimport notifyActive from \"./notifyActive\";\nimport {createStartEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst notifyStartEvent = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) => notifyActive(notifier, createStartEvent(notifier));\n\nexport default notifyStartEvent;\n","// @flow\n\nconst requestStatuses = {\n  canceled: (\"canceled\": \"canceled\"),\n  canceling: (\"canceling\": \"canceling\"),\n  pending: (\"pending\": \"pending\"),\n  sent: (\"sent\": \"sent\"),\n  sending: (\"sending\": \"sending\")\n};\n\ntype RequestStatus = $Values<typeof requestStatuses>;\n\nexport default requestStatuses;\n\nexport type {RequestStatus};\n","// @flow\n\nimport flushCanceled from \"./flushCanceled\";\nimport requestStatuses from \"./requestStatuses\";\n\nimport type {Notifier} from \"./types\";\n\nconst reset = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) =>\n  flushCanceled({\n    ...notifier,\n    isActive: true,\n    requestStatus: requestStatuses.pending,\n    subscriptionId: undefined\n  });\n\nexport default reset;\n","// @flow\n\nimport {Push} from \"phoenix\";\n\nimport type {PushHandler} from \"./types\";\n\nconst handlePush = (push: Push, handler: PushHandler<any>) =>\n  push\n    .receive(\"ok\", handler.onSucceed)\n    .receive(\"error\", handler.onError)\n    .receive(\"timeout\", handler.onTimeout);\n\nexport default handlePush;\n","// @flow\n\nimport {map} from \"@jumpn/utils-composite\";\n\nimport type {GqlRequest} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport handlePush from \"./handlePush\";\nimport notifierFind from \"./notifier/find\";\n\nimport type {AbsintheEvent} from \"./absinthe-event/types\";\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\n\nconst getPushHandlerMethodGetter = (absintheSocket, request) => handle => (\n  ...args\n) => {\n  const notifier = notifierFind(absintheSocket.notifiers, \"request\", request);\n\n  if (notifier) {\n    handle(absintheSocket, notifier, ...args);\n  }\n};\n\nconst getPushHandler = (absintheSocket, request, notifierPushHandler) =>\n  map(getPushHandlerMethodGetter(absintheSocket, request), notifierPushHandler);\n\nconst pushAbsintheEvent = <Variables: void | Object, Response: Object>(\n  absintheSocket: AbsintheSocket,\n  request: GqlRequest<Variables>,\n  notifierPushHandler: NotifierPushHandler<Response>,\n  absintheEvent: AbsintheEvent\n) => {\n  handlePush(\n    absintheSocket.channel.push(absintheEvent.name, absintheEvent.payload),\n    getPushHandler(absintheSocket, request, notifierPushHandler)\n  );\n\n  return absintheSocket;\n};\n\nexport default pushAbsintheEvent;\n","// @flow\n\nimport {replace as arrayReplace} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"./types\";\n\nconst refresh = (notifier: Notifier<any, any>) => (\n  notifiers: Array<Notifier<any, any>>\n) =>\n  arrayReplace(\n    findIndex(notifiers, \"request\", notifier.request),\n    [notifier],\n    notifiers\n  );\n\nexport default refresh;\n","// @flow\n\nimport notifierRefresh from \"./notifier/refresh\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst refreshNotifier = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>\n) => {\n  updateNotifiers(absintheSocket, notifierRefresh(notifier));\n\n  return notifier;\n};\n\nexport default refreshNotifier;\n","// @flow\n\nconst absintheEventNames = {\n  doc: (\"doc\": \"doc\"),\n  unsubscribe: (\"unsubscribe\": \"unsubscribe\")\n};\n\ntype AbsintheEventName = $Values<typeof absintheEventNames>;\n\nexport default absintheEventNames;\n\nexport type {AbsintheEventName};\n","// @flow\n\nimport absintheEventNames from \"./absintheEventNames\";\n\nimport type {AbsintheDocEvent, AbsintheUnsubscribeEvent} from \"./types\";\n\nconst createAbsintheUnsubscribeEvent = (\n  payload: $ElementType<AbsintheUnsubscribeEvent, \"payload\">\n): AbsintheUnsubscribeEvent => ({\n  payload,\n  name: absintheEventNames.unsubscribe\n});\n\nconst createAbsintheDocEvent = <Variables: void | Object>(\n  payload: $ElementType<AbsintheDocEvent<Variables>, \"payload\">\n): AbsintheDocEvent<Variables> => ({\n  payload,\n  name: absintheEventNames.doc\n});\n\nexport {createAbsintheDocEvent, createAbsintheUnsubscribeEvent};\n","// @flow\n\nimport {requestToCompat} from \"@jumpn/utils-graphql\";\n\nimport abortNotifier from \"./abortNotifier\";\nimport notifierNotifyActive from \"./notifier/notifyActive\";\nimport pushAbsintheEvent from \"./pushAbsintheEvent\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport {createAbsintheDocEvent} from \"./absinthe-event/absintheEventCreators\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst pushAbsintheDocEvent = (absintheSocket, {request}, notifierPushHandler) =>\n  pushAbsintheEvent(\n    absintheSocket,\n    request,\n    notifierPushHandler,\n    createAbsintheDocEvent(requestToCompat(request))\n  );\n\nconst setNotifierRequestStatusSending = (absintheSocket, notifier) =>\n  refreshNotifier(absintheSocket, {\n    ...notifier,\n    requestStatus: requestStatuses.sending\n  });\n\nconst createRequestError = message => new Error(`request: ${message}`);\n\nconst onTimeout = (absintheSocket, notifier) =>\n  notifierNotifyActive(\n    notifier,\n    createErrorEvent(createRequestError(\"timeout\"))\n  );\n\nconst onError = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  errorMessage: string\n) => abortNotifier(absintheSocket, notifier, createRequestError(errorMessage));\n\nconst getNotifierPushHandler = onSucceed => ({onError, onSucceed, onTimeout});\n\nconst pushRequestUsing = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  onSucceed: $ElementType<NotifierPushHandler<any>, \"onSucceed\">\n) =>\n  pushAbsintheDocEvent(\n    absintheSocket,\n    setNotifierRequestStatusSending(absintheSocket, notifier),\n    getNotifierPushHandler(onSucceed)\n  );\n\nexport {pushRequestUsing as default, onError};\n","// @flow\n\nimport {errorsToString as gqlErrorsToString} from \"@jumpn/utils-graphql\";\n\nimport type {\n  GqlError,\n  GqlResponse\n} from \"@jumpn/utils-graphql/compat/cjs/types\";\nimport type {Message} from \"phoenix\";\n\nimport abortNotifier from \"./abortNotifier\";\nimport notifierFind from \"./notifier/find\";\nimport notifierFlushCanceled from \"./notifier/flushCanceled\";\nimport notifierNotifyCanceled from \"./notifier/notifyCanceled\";\nimport notifierNotifyResultEvent from \"./notifier/notifyResultEvent\";\nimport notifierNotifyStartEvent from \"./notifier/notifyStartEvent\";\nimport notifierRemove from \"./notifier/remove\";\nimport notifierReset from \"./notifier/reset\";\nimport pushAbsintheEvent from \"./pushAbsintheEvent\";\nimport pushRequestUsing, {onError} from \"./pushRequestUsing\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {createAbsintheUnsubscribeEvent} from \"./absinthe-event/absintheEventCreators\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\ntype SubscriptionPayload<Data> = {|\n  result: GqlResponse<Data>,\n  subscriptionId: string\n|};\n\n// TODO: improve this type\ntype UnsubscribeResponse = {};\n\ntype SubscriptionResponse =\n  | {|subscriptionId: string|}\n  | {|errors: Array<GqlError>|};\n\nconst onUnsubscribeSucceedCanceled = (absintheSocket, notifier) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifierFlushCanceled(notifier))\n  );\n\nconst onUnsubscribeSucceedActive = (absintheSocket, notifier) =>\n  subscribe(\n    absintheSocket,\n    refreshNotifier(absintheSocket, notifierReset(notifier))\n  );\n\nconst createUnsubscribeError = message => new Error(`unsubscribe: ${message}`);\n\nconst unsubscribeHandler: NotifierPushHandler<UnsubscribeResponse> = {\n  onError: (absintheSocket, notifier, errorMessage) =>\n    abortNotifier(\n      absintheSocket,\n      notifier,\n      createUnsubscribeError(errorMessage)\n    ),\n\n  onTimeout: (absintheSocket, notifier) =>\n    notifierNotifyCanceled(\n      notifier,\n      createErrorEvent(createUnsubscribeError(\"timeout\"))\n    ),\n\n  onSucceed: (absintheSocket, notifier) => {\n    if (notifier.isActive) {\n      onUnsubscribeSucceedActive(absintheSocket, notifier);\n    } else {\n      onUnsubscribeSucceedCanceled(absintheSocket, notifier);\n    }\n  }\n};\n\nconst pushAbsintheUnsubscribeEvent = (\n  absintheSocket,\n  {request, subscriptionId}\n) =>\n  pushAbsintheEvent(\n    absintheSocket,\n    request,\n    unsubscribeHandler,\n    createAbsintheUnsubscribeEvent({subscriptionId})\n  );\n\nconst unsubscribe = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>\n) =>\n  pushAbsintheUnsubscribeEvent(\n    absintheSocket,\n    refreshNotifier(absintheSocket, {\n      ...notifier,\n      requestStatus: requestStatuses.canceling\n    })\n  );\n\nconst onSubscribeSucceed = (absintheSocket, notifier, {subscriptionId}) => {\n  const subscribedNotifier = refreshNotifier(absintheSocket, {\n    ...notifier,\n    subscriptionId,\n    requestStatus: requestStatuses.sent\n  });\n\n  if (subscribedNotifier.isActive) {\n    notifierNotifyStartEvent(subscribedNotifier);\n  } else {\n    unsubscribe(absintheSocket, subscribedNotifier);\n  }\n};\n\nconst onSubscribe = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  response: SubscriptionResponse\n) => {\n  if (response.errors) {\n    onError(absintheSocket, notifier, gqlErrorsToString(response.errors));\n  } else {\n    onSubscribeSucceed(absintheSocket, notifier, response);\n  }\n};\n\nconst subscribe = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>\n) => pushRequestUsing(absintheSocket, notifier, onSubscribe);\n\nconst onDataMessage = (\n  absintheSocket: AbsintheSocket,\n  {payload}: Message<SubscriptionPayload<any>>\n) => {\n  const notifier = notifierFind(\n    absintheSocket.notifiers,\n    \"subscriptionId\",\n    payload.subscriptionId\n  );\n\n  if (notifier) {\n    notifierNotifyResultEvent(notifier, payload.result);\n  }\n};\n\nconst dataMessageEventName = \"subscription:data\";\n\nconst isDataMessage = (message: Message<>) =>\n  message.event === dataMessageEventName;\n\nexport {isDataMessage, onDataMessage, subscribe, unsubscribe};\n\nexport type {SubscriptionPayload};\n"],"names":["getNotifier","handlerName","payload","observer","getHandlerName","name","notifyAll","observers","event","forEach","getObservers","activeObservers","canceledObservers","notify","notifier","observerNotifyAll","findIndex","notifiers","key","value","hasIn","remove","arrayRemove","request","updateNotifiers","absintheSocket","updater","eventNames","abort","cancel","error","result","start","createStartEvent","createResultEvent","createErrorEvent","createCancelEvent","undefined","createAbortEvent","abortNotifier","notifierRemove","notifierNotify","find","notifyCanceled","clearCanceled","flushCanceled","length","notifyActive","notifyResultEvent","notifyStartEvent","requestStatuses","canceled","canceling","pending","sent","sending","reset","isActive","requestStatus","subscriptionId","handlePush","push","handler","receive","onSucceed","onError","onTimeout","getPushHandlerMethodGetter","handle","notifierFind","args","getPushHandler","notifierPushHandler","map","pushAbsintheEvent","absintheEvent","channel","refresh","arrayReplace","refreshNotifier","notifierRefresh","absintheEventNames","doc","unsubscribe","createAbsintheUnsubscribeEvent","createAbsintheDocEvent","pushAbsintheDocEvent","requestToCompat","setNotifierRequestStatusSending","createRequestError","message","Error","notifierNotifyActive","errorMessage","getNotifierPushHandler","pushRequestUsing","onUnsubscribeSucceedCanceled","notifierFlushCanceled","onUnsubscribeSucceedActive","subscribe","notifierReset","createUnsubscribeError","unsubscribeHandler","notifierNotifyCanceled","pushAbsintheUnsubscribeEvent","onSubscribeSucceed","subscribedNotifier","notifierNotifyStartEvent","onSubscribe","response","errors","gqlErrorsToString","onDataMessage","notifierNotifyResultEvent","dataMessageEventName","isDataMessage"],"mappings":"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"}
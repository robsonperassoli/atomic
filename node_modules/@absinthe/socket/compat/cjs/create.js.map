{"version":3,"file":"create.js","sources":["../../src/notifier/observer/notifyAll.js","../../src/notifier/notify.js","../../src/notifier/findIndex.js","../../src/notifier/remove.js","../../src/updateNotifiers.js","../../src/notifier/event/eventNames.js","../../src/notifier/event/eventCreators.js","../../src/abortNotifier.js","../../src/handlePush.js","../../src/notifier/notifyActive.js","../../src/notifier/notifyResultEvent.js","../../src/notifier/notifyStartEvent.js","../../src/notifier/find.js","../../src/pushAbsintheEvent.js","../../src/notifier/refresh.js","../../src/refreshNotifier.js","../../src/notifier/requestStatuses.js","../../src/absinthe-event/absintheEventNames.js","../../src/absinthe-event/absintheEventCreators.js","../../src/pushRequestUsing.js","../../src/notifier/notifyCanceled.js","../../src/notifier/flushCanceled.js","../../src/notifier/reset.js","../../src/subscription.js","../../src/pushRequest.js","../../src/joinChannel.js","../../src/create.js"],"sourcesContent":["// @flow\n\nimport type {Event, Observer} from \"../types\";\n\nconst getNotifier = (handlerName, payload) => observer =>\n  observer[handlerName] && observer[handlerName](payload);\n\nconst getHandlerName = ({name}) => `on${name}`;\n\nconst notifyAll = <Result, Variables: void | Object>(\n  observers: $ReadOnlyArray<Observer<Result, Variables>>,\n  event: Event\n) => observers.forEach(getNotifier(getHandlerName(event), event.payload));\n\nexport default notifyAll;\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst getObservers = ({activeObservers, canceledObservers}) => [\n  ...activeObservers,\n  ...canceledObservers\n];\n\nconst notify = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(getObservers(notifier), event);\n\n  return notifier;\n};\n\nexport default notify;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst findIndex = (\n  notifiers: Array<Notifier<any, any>>,\n  key: string,\n  value: any\n) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.findIndex(hasIn([key], value));\n\nexport default findIndex;\n","// @flow\n\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"./types\";\n\nconst remove = (notifier: Notifier<any, any>) => (\n  notifiers: Array<Notifier<any, any>>\n) =>\n  arrayRemove(findIndex(notifiers, \"request\", notifier.request), 1, notifiers);\n\nexport default remove;\n","// @flow\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\ntype Notifiers = Array<Notifier<any, any>>;\n\nconst updateNotifiers = (\n  absintheSocket: AbsintheSocket,\n  updater: (notifiers: Notifiers) => Notifiers\n) => {\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n\n  return absintheSocket;\n};\n\nexport default updateNotifiers;\n","// @flow\n\nconst eventNames = {\n  abort: (\"Abort\": \"Abort\"),\n  cancel: (\"Cancel\": \"Cancel\"),\n  error: (\"Error\": \"Error\"),\n  result: (\"Result\": \"Result\"),\n  start: (\"Start\": \"Start\")\n};\n\ntype EventName = $Values<typeof eventNames>;\n\nexport default eventNames;\n\nexport type {EventName};\n","// @flow\n\nimport eventNames from \"./eventNames\";\n\nimport type {\n  AbortEvent,\n  CancelEvent,\n  ErrorEvent,\n  Notifier,\n  ResultEvent,\n  StartEvent\n} from \"../types\";\n\nconst createStartEvent = <Payload: Notifier<any, any>>(\n  payload: Payload\n): StartEvent<Payload> => ({payload, name: eventNames.start});\n\nconst createResultEvent = <Result>(payload: Result): ResultEvent<Result> => ({\n  payload,\n  name: eventNames.result\n});\n\nconst createErrorEvent = (payload: Error): ErrorEvent => ({\n  payload,\n  name: eventNames.error\n});\n\nconst createCancelEvent = (): CancelEvent => ({\n  name: eventNames.cancel,\n  payload: undefined\n});\n\nconst createAbortEvent = (payload: Error): AbortEvent => ({\n  payload,\n  name: eventNames.abort\n});\n\nexport {\n  createStartEvent,\n  createResultEvent,\n  createErrorEvent,\n  createCancelEvent,\n  createAbortEvent\n};\n","// @flow\n\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {createAbortEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst abortNotifier = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  error: Error\n) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifierNotify(notifier, createAbortEvent(error)))\n  );\n\nexport default abortNotifier;\n","// @flow\n\nimport {Push} from \"phoenix\";\n\nimport type {PushHandler} from \"./types\";\n\nconst handlePush = (push: Push, handler: PushHandler<any>) =>\n  push\n    .receive(\"ok\", handler.onSucceed)\n    .receive(\"error\", handler.onError)\n    .receive(\"timeout\", handler.onTimeout);\n\nexport default handlePush;\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst notifyActive = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(notifier.activeObservers, event);\n\n  return notifier;\n};\n\nexport default notifyActive;\n","// @flow\n\nimport notifyActive from \"./notifyActive\";\nimport {createResultEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst notifyResultEvent = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  result: Result\n) => notifyActive(notifier, createResultEvent(result));\n\nexport default notifyResultEvent;\n","// @flow\n\nimport notifyActive from \"./notifyActive\";\nimport {createStartEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst notifyStartEvent = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) => notifyActive(notifier, createStartEvent(notifier));\n\nexport default notifyStartEvent;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst find = (notifiers: Array<Notifier<any, any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.find(hasIn([key], value));\n\nexport default find;\n","// @flow\n\nimport {map} from \"@jumpn/utils-composite\";\n\nimport type {GqlRequest} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport handlePush from \"./handlePush\";\nimport notifierFind from \"./notifier/find\";\n\nimport type {AbsintheEvent} from \"./absinthe-event/types\";\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\n\nconst getPushHandlerMethodGetter = (absintheSocket, request) => handle => (\n  ...args\n) => {\n  const notifier = notifierFind(absintheSocket.notifiers, \"request\", request);\n\n  if (notifier) {\n    handle(absintheSocket, notifier, ...args);\n  }\n};\n\nconst getPushHandler = (absintheSocket, request, notifierPushHandler) =>\n  map(getPushHandlerMethodGetter(absintheSocket, request), notifierPushHandler);\n\nconst pushAbsintheEvent = <Variables: void | Object, Response: Object>(\n  absintheSocket: AbsintheSocket,\n  request: GqlRequest<Variables>,\n  notifierPushHandler: NotifierPushHandler<Response>,\n  absintheEvent: AbsintheEvent\n) => {\n  handlePush(\n    absintheSocket.channel.push(absintheEvent.name, absintheEvent.payload),\n    getPushHandler(absintheSocket, request, notifierPushHandler)\n  );\n\n  return absintheSocket;\n};\n\nexport default pushAbsintheEvent;\n","// @flow\n\nimport {replace as arrayReplace} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"./types\";\n\nconst refresh = (notifier: Notifier<any, any>) => (\n  notifiers: Array<Notifier<any, any>>\n) =>\n  arrayReplace(\n    findIndex(notifiers, \"request\", notifier.request),\n    [notifier],\n    notifiers\n  );\n\nexport default refresh;\n","// @flow\n\nimport notifierRefresh from \"./notifier/refresh\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst refreshNotifier = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>\n) => {\n  updateNotifiers(absintheSocket, notifierRefresh(notifier));\n\n  return notifier;\n};\n\nexport default refreshNotifier;\n","// @flow\n\nconst requestStatuses = {\n  canceled: (\"canceled\": \"canceled\"),\n  canceling: (\"canceling\": \"canceling\"),\n  pending: (\"pending\": \"pending\"),\n  sent: (\"sent\": \"sent\"),\n  sending: (\"sending\": \"sending\")\n};\n\ntype RequestStatus = $Values<typeof requestStatuses>;\n\nexport default requestStatuses;\n\nexport type {RequestStatus};\n","// @flow\n\nconst absintheEventNames = {\n  doc: (\"doc\": \"doc\"),\n  unsubscribe: (\"unsubscribe\": \"unsubscribe\")\n};\n\ntype AbsintheEventName = $Values<typeof absintheEventNames>;\n\nexport default absintheEventNames;\n\nexport type {AbsintheEventName};\n","// @flow\n\nimport absintheEventNames from \"./absintheEventNames\";\n\nimport type {AbsintheDocEvent, AbsintheUnsubscribeEvent} from \"./types\";\n\nconst createAbsintheUnsubscribeEvent = (\n  payload: $ElementType<AbsintheUnsubscribeEvent, \"payload\">\n): AbsintheUnsubscribeEvent => ({\n  payload,\n  name: absintheEventNames.unsubscribe\n});\n\nconst createAbsintheDocEvent = <Variables: void | Object>(\n  payload: $ElementType<AbsintheDocEvent<Variables>, \"payload\">\n): AbsintheDocEvent<Variables> => ({\n  payload,\n  name: absintheEventNames.doc\n});\n\nexport {createAbsintheDocEvent, createAbsintheUnsubscribeEvent};\n","// @flow\n\nimport {requestToCompat} from \"@jumpn/utils-graphql\";\n\nimport abortNotifier from \"./abortNotifier\";\nimport notifierNotifyActive from \"./notifier/notifyActive\";\nimport pushAbsintheEvent from \"./pushAbsintheEvent\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport {createAbsintheDocEvent} from \"./absinthe-event/absintheEventCreators\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst pushAbsintheDocEvent = (absintheSocket, {request}, notifierPushHandler) =>\n  pushAbsintheEvent(\n    absintheSocket,\n    request,\n    notifierPushHandler,\n    createAbsintheDocEvent(requestToCompat(request))\n  );\n\nconst setNotifierRequestStatusSending = (absintheSocket, notifier) =>\n  refreshNotifier(absintheSocket, {\n    ...notifier,\n    requestStatus: requestStatuses.sending\n  });\n\nconst createRequestError = message => new Error(`request: ${message}`);\n\nconst onTimeout = (absintheSocket, notifier) =>\n  notifierNotifyActive(\n    notifier,\n    createErrorEvent(createRequestError(\"timeout\"))\n  );\n\nconst onError = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  errorMessage: string\n) => abortNotifier(absintheSocket, notifier, createRequestError(errorMessage));\n\nconst getNotifierPushHandler = onSucceed => ({onError, onSucceed, onTimeout});\n\nconst pushRequestUsing = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  onSucceed: $ElementType<NotifierPushHandler<any>, \"onSucceed\">\n) =>\n  pushAbsintheDocEvent(\n    absintheSocket,\n    setNotifierRequestStatusSending(absintheSocket, notifier),\n    getNotifierPushHandler(onSucceed)\n  );\n\nexport {pushRequestUsing as default, onError};\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst notifyCanceled = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(notifier.canceledObservers, event);\n\n  return notifier;\n};\n\nexport default notifyCanceled;\n","// @flow\n\nimport notifyCanceled from \"./notifyCanceled\";\nimport {createCancelEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst clearCanceled = notifier => ({\n  ...notifier,\n  canceledObservers: []\n});\n\nconst flushCanceled = <Result: any, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) =>\n  notifier.canceledObservers.length > 0\n    ? clearCanceled(notifyCanceled(notifier, createCancelEvent()))\n    : notifier;\n\nexport default flushCanceled;\n","// @flow\n\nimport flushCanceled from \"./flushCanceled\";\nimport requestStatuses from \"./requestStatuses\";\n\nimport type {Notifier} from \"./types\";\n\nconst reset = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) =>\n  flushCanceled({\n    ...notifier,\n    isActive: true,\n    requestStatus: requestStatuses.pending,\n    subscriptionId: undefined\n  });\n\nexport default reset;\n","// @flow\n\nimport {errorsToString as gqlErrorsToString} from \"@jumpn/utils-graphql\";\n\nimport type {\n  GqlError,\n  GqlResponse\n} from \"@jumpn/utils-graphql/compat/cjs/types\";\nimport type {Message} from \"phoenix\";\n\nimport abortNotifier from \"./abortNotifier\";\nimport notifierFind from \"./notifier/find\";\nimport notifierFlushCanceled from \"./notifier/flushCanceled\";\nimport notifierNotifyCanceled from \"./notifier/notifyCanceled\";\nimport notifierNotifyResultEvent from \"./notifier/notifyResultEvent\";\nimport notifierNotifyStartEvent from \"./notifier/notifyStartEvent\";\nimport notifierRemove from \"./notifier/remove\";\nimport notifierReset from \"./notifier/reset\";\nimport pushAbsintheEvent from \"./pushAbsintheEvent\";\nimport pushRequestUsing, {onError} from \"./pushRequestUsing\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {createAbsintheUnsubscribeEvent} from \"./absinthe-event/absintheEventCreators\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\ntype SubscriptionPayload<Data> = {|\n  result: GqlResponse<Data>,\n  subscriptionId: string\n|};\n\n// TODO: improve this type\ntype UnsubscribeResponse = {};\n\ntype SubscriptionResponse =\n  | {|subscriptionId: string|}\n  | {|errors: Array<GqlError>|};\n\nconst onUnsubscribeSucceedCanceled = (absintheSocket, notifier) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifierFlushCanceled(notifier))\n  );\n\nconst onUnsubscribeSucceedActive = (absintheSocket, notifier) =>\n  subscribe(\n    absintheSocket,\n    refreshNotifier(absintheSocket, notifierReset(notifier))\n  );\n\nconst createUnsubscribeError = message => new Error(`unsubscribe: ${message}`);\n\nconst unsubscribeHandler: NotifierPushHandler<UnsubscribeResponse> = {\n  onError: (absintheSocket, notifier, errorMessage) =>\n    abortNotifier(\n      absintheSocket,\n      notifier,\n      createUnsubscribeError(errorMessage)\n    ),\n\n  onTimeout: (absintheSocket, notifier) =>\n    notifierNotifyCanceled(\n      notifier,\n      createErrorEvent(createUnsubscribeError(\"timeout\"))\n    ),\n\n  onSucceed: (absintheSocket, notifier) => {\n    if (notifier.isActive) {\n      onUnsubscribeSucceedActive(absintheSocket, notifier);\n    } else {\n      onUnsubscribeSucceedCanceled(absintheSocket, notifier);\n    }\n  }\n};\n\nconst pushAbsintheUnsubscribeEvent = (\n  absintheSocket,\n  {request, subscriptionId}\n) =>\n  pushAbsintheEvent(\n    absintheSocket,\n    request,\n    unsubscribeHandler,\n    createAbsintheUnsubscribeEvent({subscriptionId})\n  );\n\nconst unsubscribe = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>\n) =>\n  pushAbsintheUnsubscribeEvent(\n    absintheSocket,\n    refreshNotifier(absintheSocket, {\n      ...notifier,\n      requestStatus: requestStatuses.canceling\n    })\n  );\n\nconst onSubscribeSucceed = (absintheSocket, notifier, {subscriptionId}) => {\n  const subscribedNotifier = refreshNotifier(absintheSocket, {\n    ...notifier,\n    subscriptionId,\n    requestStatus: requestStatuses.sent\n  });\n\n  if (subscribedNotifier.isActive) {\n    notifierNotifyStartEvent(subscribedNotifier);\n  } else {\n    unsubscribe(absintheSocket, subscribedNotifier);\n  }\n};\n\nconst onSubscribe = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  response: SubscriptionResponse\n) => {\n  if (response.errors) {\n    onError(absintheSocket, notifier, gqlErrorsToString(response.errors));\n  } else {\n    onSubscribeSucceed(absintheSocket, notifier, response);\n  }\n};\n\nconst subscribe = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>\n) => pushRequestUsing(absintheSocket, notifier, onSubscribe);\n\nconst onDataMessage = (\n  absintheSocket: AbsintheSocket,\n  {payload}: Message<SubscriptionPayload<any>>\n) => {\n  const notifier = notifierFind(\n    absintheSocket.notifiers,\n    \"subscriptionId\",\n    payload.subscriptionId\n  );\n\n  if (notifier) {\n    notifierNotifyResultEvent(notifier, payload.result);\n  }\n};\n\nconst dataMessageEventName = \"subscription:data\";\n\nconst isDataMessage = (message: Message<>) =>\n  message.event === dataMessageEventName;\n\nexport {isDataMessage, onDataMessage, subscribe, unsubscribe};\n\nexport type {SubscriptionPayload};\n","// @flow\n\nimport type {GqlResponse} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport notifierNotifyResultEvent from \"./notifier/notifyResultEvent\";\nimport notifierNotifyStartEvent from \"./notifier/notifyStartEvent\";\nimport notifierRemove from \"./notifier/remove\";\nimport pushRequestUsing from \"./pushRequestUsing\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {subscribe} from \"./subscription\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst setNotifierRequestStatusSent = (absintheSocket, notifier) =>\n  refreshNotifier(absintheSocket, {\n    ...notifier,\n    requestStatus: requestStatuses.sent\n  });\n\nconst onQueryOrMutationSucceed = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  response: GqlResponse<any>\n) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(\n      notifierNotifyResultEvent(\n        setNotifierRequestStatusSent(absintheSocket, notifier),\n        response\n      )\n    )\n  );\n\nconst pushQueryOrMutation = (absintheSocket, notifier) =>\n  pushRequestUsing(\n    absintheSocket,\n    notifierNotifyStartEvent(notifier),\n    onQueryOrMutationSucceed\n  );\n\nconst pushRequest = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>\n) => {\n  if (notifier.operationType === \"subscription\") {\n    subscribe(absintheSocket, notifier);\n  } else {\n    pushQueryOrMutation(absintheSocket, notifier);\n  }\n};\n\nexport default pushRequest;\n","// @flow\n\nimport handlePush from \"./handlePush\";\nimport notifierNotifyActive from \"./notifier/notifyActive\";\nimport pushRequest from \"./pushRequest\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket} from \"./types\";\n\nconst createChannelJoinError = message => new Error(`channel join: ${message}`);\n\nconst notifyErrorToAllActive = (absintheSocket, errorMessage) =>\n  absintheSocket.notifiers.forEach(notifier =>\n    notifierNotifyActive(\n      notifier,\n      createErrorEvent(createChannelJoinError(errorMessage))\n    )\n  );\n\n// join Push is reused and so the handler\n// https://github.com/phoenixframework/phoenix/blob/master/assets/js/phoenix.js#L356\nconst createChannelJoinHandler = absintheSocket => ({\n  onError: (errorMessage: string) =>\n    notifyErrorToAllActive(absintheSocket, errorMessage),\n\n  onSucceed: () =>\n    absintheSocket.notifiers.forEach(notifier =>\n      pushRequest(absintheSocket, notifier)\n    ),\n\n  onTimeout: () => notifyErrorToAllActive(absintheSocket, \"timeout\")\n});\n\nconst joinChannel = (absintheSocket: AbsintheSocket) => {\n  handlePush(\n    absintheSocket.channel.join(),\n    createChannelJoinHandler(absintheSocket)\n  );\n\n  absintheSocket.channelJoinCreated = true;\n\n  return absintheSocket;\n};\n\nexport default joinChannel;\n","// @flow\n\nimport {Socket as PhoenixSocket} from \"phoenix\";\n\nimport type {Message} from \"phoenix\";\n\nimport abortNotifier from \"./abortNotifier\";\nimport joinChannel from \"./joinChannel\";\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport notifierReset from \"./notifier/reset\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport * as withSubscription from \"./subscription\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket} from \"./types\";\n\nconst onMessage = absintheSocket => (message: Message<>) => {\n  if (withSubscription.isDataMessage(message)) {\n    withSubscription.onDataMessage(absintheSocket, message);\n  }\n};\n\nconst createConnectionCloseError = () => new Error(\"connection: close\");\n\nconst notifyConnectionCloseError = notifier =>\n  notifierNotify(notifier, createErrorEvent(createConnectionCloseError()));\n\nconst notifierOnConnectionCloseCanceled = (absintheSocket, notifier) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifyConnectionCloseError(notifier))\n  );\n\nconst notifierOnConnectionCloseActive = (absintheSocket, notifier) => {\n  if (notifier.operationType === \"mutation\") {\n    abortNotifier(absintheSocket, notifier, createConnectionCloseError());\n  } else {\n    refreshNotifier(\n      absintheSocket,\n      notifierReset(notifyConnectionCloseError(notifier))\n    );\n  }\n};\n\nconst notifierOnConnectionClose = absintheSocket => notifier => {\n  if (notifier.isActive) {\n    notifierOnConnectionCloseActive(absintheSocket, notifier);\n  } else {\n    notifierOnConnectionCloseCanceled(absintheSocket, notifier);\n  }\n};\n\nconst onConnectionClose = absintheSocket => () =>\n  absintheSocket.notifiers.forEach(notifierOnConnectionClose(absintheSocket));\n\nconst shouldJoinChannel = absintheSocket =>\n  !absintheSocket.channelJoinCreated && absintheSocket.notifiers.length > 0;\n\nconst onConnectionOpen = absintheSocket => () => {\n  if (shouldJoinChannel(absintheSocket)) {\n    joinChannel(absintheSocket);\n  }\n};\n\nconst absintheChannelName = \"__absinthe__:control\";\n\n/**\n * Creates an Absinthe Socket using the given Phoenix Socket instance\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n * import {Socket as PhoenixSocket} from \"phoenix\";\n\n * const absintheSocket = withAbsintheSocket.create(\n *   new PhoenixSocket(\"ws://localhost:4000/socket\")\n * );\n */\nconst create = (phoenixSocket: PhoenixSocket): AbsintheSocket => {\n  const absintheSocket: AbsintheSocket = {\n    phoenixSocket,\n    channel: phoenixSocket.channel(absintheChannelName),\n    channelJoinCreated: false,\n    notifiers: []\n  };\n\n  phoenixSocket.onOpen(onConnectionOpen(absintheSocket));\n  phoenixSocket.onClose(onConnectionClose(absintheSocket));\n  phoenixSocket.onMessage(onMessage(absintheSocket));\n\n  return absintheSocket;\n};\n\nexport default create;\n"],"names":["getNotifier","handlerName","payload","observer","getHandlerName","name","notifyAll","observers","event","forEach","getObservers","activeObservers","canceledObservers","notify","notifier","observerNotifyAll","findIndex","notifiers","key","value","hasIn","remove","arrayRemove","request","updateNotifiers","absintheSocket","updater","eventNames","abort","cancel","error","result","start","createStartEvent","createResultEvent","createErrorEvent","createCancelEvent","undefined","createAbortEvent","abortNotifier","notifierRemove","notifierNotify","handlePush","push","handler","receive","onSucceed","onError","onTimeout","notifyActive","notifyResultEvent","notifyStartEvent","find","getPushHandlerMethodGetter","handle","notifierFind","args","getPushHandler","notifierPushHandler","map","pushAbsintheEvent","absintheEvent","channel","refresh","arrayReplace","refreshNotifier","notifierRefresh","requestStatuses","canceled","canceling","pending","sent","sending","absintheEventNames","doc","unsubscribe","createAbsintheUnsubscribeEvent","createAbsintheDocEvent","pushAbsintheDocEvent","requestToCompat","setNotifierRequestStatusSending","requestStatus","createRequestError","message","Error","notifierNotifyActive","errorMessage","getNotifierPushHandler","pushRequestUsing","notifyCanceled","clearCanceled","flushCanceled","length","reset","isActive","subscriptionId","onUnsubscribeSucceedCanceled","notifierFlushCanceled","onUnsubscribeSucceedActive","subscribe","notifierReset","createUnsubscribeError","unsubscribeHandler","notifierNotifyCanceled","pushAbsintheUnsubscribeEvent","onSubscribeSucceed","subscribedNotifier","notifierNotifyStartEvent","onSubscribe","response","errors","gqlErrorsToString","onDataMessage","notifierNotifyResultEvent","dataMessageEventName","isDataMessage","setNotifierRequestStatusSent","onQueryOrMutationSucceed","pushQueryOrMutation","pushRequest","operationType","createChannelJoinError","notifyErrorToAllActive","createChannelJoinHandler","joinChannel","join","channelJoinCreated","onMessage","withSubscription","createConnectionCloseError","notifyConnectionCloseError","notifierOnConnectionCloseCanceled","notifierOnConnectionCloseActive","notifierOnConnectionClose","onConnectionClose","shouldJoinChannel","onConnectionOpen","absintheChannelName","create","phoenixSocket","onOpen","onClose"],"mappings":"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"}
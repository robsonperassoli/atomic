{"version":3,"file":"pushRequest.js","sources":["../../src/notifier/observer/notifyAll.js","../../src/notifier/notifyActive.js","../../src/notifier/event/eventNames.js","../../src/notifier/event/eventCreators.js","../../src/notifier/notifyResultEvent.js","../../src/notifier/notifyStartEvent.js","../../src/notifier/findIndex.js","../../src/notifier/remove.js","../../src/notifier/notify.js","../../src/updateNotifiers.js","../../src/abortNotifier.js","../../src/handlePush.js","../../src/notifier/find.js","../../src/pushAbsintheEvent.js","../../src/notifier/refresh.js","../../src/refreshNotifier.js","../../src/notifier/requestStatuses.js","../../src/absinthe-event/absintheEventNames.js","../../src/absinthe-event/absintheEventCreators.js","../../src/pushRequestUsing.js","../../src/notifier/notifyCanceled.js","../../src/notifier/flushCanceled.js","../../src/notifier/reset.js","../../src/subscription.js","../../src/pushRequest.js"],"sourcesContent":["// @flow\n\nimport type {Event, Observer} from \"../types\";\n\nconst getNotifier = (handlerName, payload) => observer =>\n  observer[handlerName] && observer[handlerName](payload);\n\nconst getHandlerName = ({name}) => `on${name}`;\n\nconst notifyAll = <Result, Variables: void | Object>(\n  observers: $ReadOnlyArray<Observer<Result, Variables>>,\n  event: Event\n) => observers.forEach(getNotifier(getHandlerName(event), event.payload));\n\nexport default notifyAll;\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst notifyActive = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(notifier.activeObservers, event);\n\n  return notifier;\n};\n\nexport default notifyActive;\n","// @flow\n\nconst eventNames = {\n  abort: (\"Abort\": \"Abort\"),\n  cancel: (\"Cancel\": \"Cancel\"),\n  error: (\"Error\": \"Error\"),\n  result: (\"Result\": \"Result\"),\n  start: (\"Start\": \"Start\")\n};\n\ntype EventName = $Values<typeof eventNames>;\n\nexport default eventNames;\n\nexport type {EventName};\n","// @flow\n\nimport eventNames from \"./eventNames\";\n\nimport type {\n  AbortEvent,\n  CancelEvent,\n  ErrorEvent,\n  Notifier,\n  ResultEvent,\n  StartEvent\n} from \"../types\";\n\nconst createStartEvent = <Payload: Notifier<any, any>>(\n  payload: Payload\n): StartEvent<Payload> => ({payload, name: eventNames.start});\n\nconst createResultEvent = <Result>(payload: Result): ResultEvent<Result> => ({\n  payload,\n  name: eventNames.result\n});\n\nconst createErrorEvent = (payload: Error): ErrorEvent => ({\n  payload,\n  name: eventNames.error\n});\n\nconst createCancelEvent = (): CancelEvent => ({\n  name: eventNames.cancel,\n  payload: undefined\n});\n\nconst createAbortEvent = (payload: Error): AbortEvent => ({\n  payload,\n  name: eventNames.abort\n});\n\nexport {\n  createStartEvent,\n  createResultEvent,\n  createErrorEvent,\n  createCancelEvent,\n  createAbortEvent\n};\n","// @flow\n\nimport notifyActive from \"./notifyActive\";\nimport {createResultEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst notifyResultEvent = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  result: Result\n) => notifyActive(notifier, createResultEvent(result));\n\nexport default notifyResultEvent;\n","// @flow\n\nimport notifyActive from \"./notifyActive\";\nimport {createStartEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst notifyStartEvent = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) => notifyActive(notifier, createStartEvent(notifier));\n\nexport default notifyStartEvent;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst findIndex = (\n  notifiers: Array<Notifier<any, any>>,\n  key: string,\n  value: any\n) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.findIndex(hasIn([key], value));\n\nexport default findIndex;\n","// @flow\n\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"./types\";\n\nconst remove = (notifier: Notifier<any, any>) => (\n  notifiers: Array<Notifier<any, any>>\n) =>\n  arrayRemove(findIndex(notifiers, \"request\", notifier.request), 1, notifiers);\n\nexport default remove;\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst getObservers = ({activeObservers, canceledObservers}) => [\n  ...activeObservers,\n  ...canceledObservers\n];\n\nconst notify = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(getObservers(notifier), event);\n\n  return notifier;\n};\n\nexport default notify;\n","// @flow\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\ntype Notifiers = Array<Notifier<any, any>>;\n\nconst updateNotifiers = (\n  absintheSocket: AbsintheSocket,\n  updater: (notifiers: Notifiers) => Notifiers\n) => {\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n\n  return absintheSocket;\n};\n\nexport default updateNotifiers;\n","// @flow\n\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {createAbortEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst abortNotifier = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  error: Error\n) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifierNotify(notifier, createAbortEvent(error)))\n  );\n\nexport default abortNotifier;\n","// @flow\n\nimport {Push} from \"phoenix\";\n\nimport type {PushHandler} from \"./types\";\n\nconst handlePush = (push: Push, handler: PushHandler<any>) =>\n  push\n    .receive(\"ok\", handler.onSucceed)\n    .receive(\"error\", handler.onError)\n    .receive(\"timeout\", handler.onTimeout);\n\nexport default handlePush;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst find = (notifiers: Array<Notifier<any, any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.find(hasIn([key], value));\n\nexport default find;\n","// @flow\n\nimport {map} from \"@jumpn/utils-composite\";\n\nimport type {GqlRequest} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport handlePush from \"./handlePush\";\nimport notifierFind from \"./notifier/find\";\n\nimport type {AbsintheEvent} from \"./absinthe-event/types\";\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\n\nconst getPushHandlerMethodGetter = (absintheSocket, request) => handle => (\n  ...args\n) => {\n  const notifier = notifierFind(absintheSocket.notifiers, \"request\", request);\n\n  if (notifier) {\n    handle(absintheSocket, notifier, ...args);\n  }\n};\n\nconst getPushHandler = (absintheSocket, request, notifierPushHandler) =>\n  map(getPushHandlerMethodGetter(absintheSocket, request), notifierPushHandler);\n\nconst pushAbsintheEvent = <Variables: void | Object, Response: Object>(\n  absintheSocket: AbsintheSocket,\n  request: GqlRequest<Variables>,\n  notifierPushHandler: NotifierPushHandler<Response>,\n  absintheEvent: AbsintheEvent\n) => {\n  handlePush(\n    absintheSocket.channel.push(absintheEvent.name, absintheEvent.payload),\n    getPushHandler(absintheSocket, request, notifierPushHandler)\n  );\n\n  return absintheSocket;\n};\n\nexport default pushAbsintheEvent;\n","// @flow\n\nimport {replace as arrayReplace} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"./types\";\n\nconst refresh = (notifier: Notifier<any, any>) => (\n  notifiers: Array<Notifier<any, any>>\n) =>\n  arrayReplace(\n    findIndex(notifiers, \"request\", notifier.request),\n    [notifier],\n    notifiers\n  );\n\nexport default refresh;\n","// @flow\n\nimport notifierRefresh from \"./notifier/refresh\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst refreshNotifier = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>\n) => {\n  updateNotifiers(absintheSocket, notifierRefresh(notifier));\n\n  return notifier;\n};\n\nexport default refreshNotifier;\n","// @flow\n\nconst requestStatuses = {\n  canceled: (\"canceled\": \"canceled\"),\n  canceling: (\"canceling\": \"canceling\"),\n  pending: (\"pending\": \"pending\"),\n  sent: (\"sent\": \"sent\"),\n  sending: (\"sending\": \"sending\")\n};\n\ntype RequestStatus = $Values<typeof requestStatuses>;\n\nexport default requestStatuses;\n\nexport type {RequestStatus};\n","// @flow\n\nconst absintheEventNames = {\n  doc: (\"doc\": \"doc\"),\n  unsubscribe: (\"unsubscribe\": \"unsubscribe\")\n};\n\ntype AbsintheEventName = $Values<typeof absintheEventNames>;\n\nexport default absintheEventNames;\n\nexport type {AbsintheEventName};\n","// @flow\n\nimport absintheEventNames from \"./absintheEventNames\";\n\nimport type {AbsintheDocEvent, AbsintheUnsubscribeEvent} from \"./types\";\n\nconst createAbsintheUnsubscribeEvent = (\n  payload: $ElementType<AbsintheUnsubscribeEvent, \"payload\">\n): AbsintheUnsubscribeEvent => ({\n  payload,\n  name: absintheEventNames.unsubscribe\n});\n\nconst createAbsintheDocEvent = <Variables: void | Object>(\n  payload: $ElementType<AbsintheDocEvent<Variables>, \"payload\">\n): AbsintheDocEvent<Variables> => ({\n  payload,\n  name: absintheEventNames.doc\n});\n\nexport {createAbsintheDocEvent, createAbsintheUnsubscribeEvent};\n","// @flow\n\nimport {requestToCompat} from \"@jumpn/utils-graphql\";\n\nimport abortNotifier from \"./abortNotifier\";\nimport notifierNotifyActive from \"./notifier/notifyActive\";\nimport pushAbsintheEvent from \"./pushAbsintheEvent\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport {createAbsintheDocEvent} from \"./absinthe-event/absintheEventCreators\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst pushAbsintheDocEvent = (absintheSocket, {request}, notifierPushHandler) =>\n  pushAbsintheEvent(\n    absintheSocket,\n    request,\n    notifierPushHandler,\n    createAbsintheDocEvent(requestToCompat(request))\n  );\n\nconst setNotifierRequestStatusSending = (absintheSocket, notifier) =>\n  refreshNotifier(absintheSocket, {\n    ...notifier,\n    requestStatus: requestStatuses.sending\n  });\n\nconst createRequestError = message => new Error(`request: ${message}`);\n\nconst onTimeout = (absintheSocket, notifier) =>\n  notifierNotifyActive(\n    notifier,\n    createErrorEvent(createRequestError(\"timeout\"))\n  );\n\nconst onError = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  errorMessage: string\n) => abortNotifier(absintheSocket, notifier, createRequestError(errorMessage));\n\nconst getNotifierPushHandler = onSucceed => ({onError, onSucceed, onTimeout});\n\nconst pushRequestUsing = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  onSucceed: $ElementType<NotifierPushHandler<any>, \"onSucceed\">\n) =>\n  pushAbsintheDocEvent(\n    absintheSocket,\n    setNotifierRequestStatusSending(absintheSocket, notifier),\n    getNotifierPushHandler(onSucceed)\n  );\n\nexport {pushRequestUsing as default, onError};\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst notifyCanceled = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(notifier.canceledObservers, event);\n\n  return notifier;\n};\n\nexport default notifyCanceled;\n","// @flow\n\nimport notifyCanceled from \"./notifyCanceled\";\nimport {createCancelEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst clearCanceled = notifier => ({\n  ...notifier,\n  canceledObservers: []\n});\n\nconst flushCanceled = <Result: any, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) =>\n  notifier.canceledObservers.length > 0\n    ? clearCanceled(notifyCanceled(notifier, createCancelEvent()))\n    : notifier;\n\nexport default flushCanceled;\n","// @flow\n\nimport flushCanceled from \"./flushCanceled\";\nimport requestStatuses from \"./requestStatuses\";\n\nimport type {Notifier} from \"./types\";\n\nconst reset = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) =>\n  flushCanceled({\n    ...notifier,\n    isActive: true,\n    requestStatus: requestStatuses.pending,\n    subscriptionId: undefined\n  });\n\nexport default reset;\n","// @flow\n\nimport {errorsToString as gqlErrorsToString} from \"@jumpn/utils-graphql\";\n\nimport type {\n  GqlError,\n  GqlResponse\n} from \"@jumpn/utils-graphql/compat/cjs/types\";\nimport type {Message} from \"phoenix\";\n\nimport abortNotifier from \"./abortNotifier\";\nimport notifierFind from \"./notifier/find\";\nimport notifierFlushCanceled from \"./notifier/flushCanceled\";\nimport notifierNotifyCanceled from \"./notifier/notifyCanceled\";\nimport notifierNotifyResultEvent from \"./notifier/notifyResultEvent\";\nimport notifierNotifyStartEvent from \"./notifier/notifyStartEvent\";\nimport notifierRemove from \"./notifier/remove\";\nimport notifierReset from \"./notifier/reset\";\nimport pushAbsintheEvent from \"./pushAbsintheEvent\";\nimport pushRequestUsing, {onError} from \"./pushRequestUsing\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {createAbsintheUnsubscribeEvent} from \"./absinthe-event/absintheEventCreators\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\ntype SubscriptionPayload<Data> = {|\n  result: GqlResponse<Data>,\n  subscriptionId: string\n|};\n\n// TODO: improve this type\ntype UnsubscribeResponse = {};\n\ntype SubscriptionResponse =\n  | {|subscriptionId: string|}\n  | {|errors: Array<GqlError>|};\n\nconst onUnsubscribeSucceedCanceled = (absintheSocket, notifier) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifierFlushCanceled(notifier))\n  );\n\nconst onUnsubscribeSucceedActive = (absintheSocket, notifier) =>\n  subscribe(\n    absintheSocket,\n    refreshNotifier(absintheSocket, notifierReset(notifier))\n  );\n\nconst createUnsubscribeError = message => new Error(`unsubscribe: ${message}`);\n\nconst unsubscribeHandler: NotifierPushHandler<UnsubscribeResponse> = {\n  onError: (absintheSocket, notifier, errorMessage) =>\n    abortNotifier(\n      absintheSocket,\n      notifier,\n      createUnsubscribeError(errorMessage)\n    ),\n\n  onTimeout: (absintheSocket, notifier) =>\n    notifierNotifyCanceled(\n      notifier,\n      createErrorEvent(createUnsubscribeError(\"timeout\"))\n    ),\n\n  onSucceed: (absintheSocket, notifier) => {\n    if (notifier.isActive) {\n      onUnsubscribeSucceedActive(absintheSocket, notifier);\n    } else {\n      onUnsubscribeSucceedCanceled(absintheSocket, notifier);\n    }\n  }\n};\n\nconst pushAbsintheUnsubscribeEvent = (\n  absintheSocket,\n  {request, subscriptionId}\n) =>\n  pushAbsintheEvent(\n    absintheSocket,\n    request,\n    unsubscribeHandler,\n    createAbsintheUnsubscribeEvent({subscriptionId})\n  );\n\nconst unsubscribe = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>\n) =>\n  pushAbsintheUnsubscribeEvent(\n    absintheSocket,\n    refreshNotifier(absintheSocket, {\n      ...notifier,\n      requestStatus: requestStatuses.canceling\n    })\n  );\n\nconst onSubscribeSucceed = (absintheSocket, notifier, {subscriptionId}) => {\n  const subscribedNotifier = refreshNotifier(absintheSocket, {\n    ...notifier,\n    subscriptionId,\n    requestStatus: requestStatuses.sent\n  });\n\n  if (subscribedNotifier.isActive) {\n    notifierNotifyStartEvent(subscribedNotifier);\n  } else {\n    unsubscribe(absintheSocket, subscribedNotifier);\n  }\n};\n\nconst onSubscribe = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  response: SubscriptionResponse\n) => {\n  if (response.errors) {\n    onError(absintheSocket, notifier, gqlErrorsToString(response.errors));\n  } else {\n    onSubscribeSucceed(absintheSocket, notifier, response);\n  }\n};\n\nconst subscribe = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>\n) => pushRequestUsing(absintheSocket, notifier, onSubscribe);\n\nconst onDataMessage = (\n  absintheSocket: AbsintheSocket,\n  {payload}: Message<SubscriptionPayload<any>>\n) => {\n  const notifier = notifierFind(\n    absintheSocket.notifiers,\n    \"subscriptionId\",\n    payload.subscriptionId\n  );\n\n  if (notifier) {\n    notifierNotifyResultEvent(notifier, payload.result);\n  }\n};\n\nconst dataMessageEventName = \"subscription:data\";\n\nconst isDataMessage = (message: Message<>) =>\n  message.event === dataMessageEventName;\n\nexport {isDataMessage, onDataMessage, subscribe, unsubscribe};\n\nexport type {SubscriptionPayload};\n","// @flow\n\nimport type {GqlResponse} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport notifierNotifyResultEvent from \"./notifier/notifyResultEvent\";\nimport notifierNotifyStartEvent from \"./notifier/notifyStartEvent\";\nimport notifierRemove from \"./notifier/remove\";\nimport pushRequestUsing from \"./pushRequestUsing\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {subscribe} from \"./subscription\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst setNotifierRequestStatusSent = (absintheSocket, notifier) =>\n  refreshNotifier(absintheSocket, {\n    ...notifier,\n    requestStatus: requestStatuses.sent\n  });\n\nconst onQueryOrMutationSucceed = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  response: GqlResponse<any>\n) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(\n      notifierNotifyResultEvent(\n        setNotifierRequestStatusSent(absintheSocket, notifier),\n        response\n      )\n    )\n  );\n\nconst pushQueryOrMutation = (absintheSocket, notifier) =>\n  pushRequestUsing(\n    absintheSocket,\n    notifierNotifyStartEvent(notifier),\n    onQueryOrMutationSucceed\n  );\n\nconst pushRequest = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>\n) => {\n  if (notifier.operationType === \"subscription\") {\n    subscribe(absintheSocket, notifier);\n  } else {\n    pushQueryOrMutation(absintheSocket, notifier);\n  }\n};\n\nexport default pushRequest;\n"],"names":["getNotifier","handlerName","payload","observer","getHandlerName","name","notifyAll","observers","event","forEach","notifyActive","notifier","observerNotifyAll","activeObservers","eventNames","abort","cancel","error","result","start","createStartEvent","createResultEvent","createErrorEvent","createCancelEvent","undefined","createAbortEvent","notifyResultEvent","notifyStartEvent","findIndex","notifiers","key","value","hasIn","remove","arrayRemove","request","getObservers","canceledObservers","notify","updateNotifiers","absintheSocket","updater","abortNotifier","notifierRemove","notifierNotify","handlePush","push","handler","receive","onSucceed","onError","onTimeout","find","getPushHandlerMethodGetter","handle","notifierFind","args","getPushHandler","notifierPushHandler","map","pushAbsintheEvent","absintheEvent","channel","refresh","arrayReplace","refreshNotifier","notifierRefresh","requestStatuses","canceled","canceling","pending","sent","sending","absintheEventNames","doc","unsubscribe","createAbsintheUnsubscribeEvent","createAbsintheDocEvent","pushAbsintheDocEvent","requestToCompat","setNotifierRequestStatusSending","requestStatus","createRequestError","message","Error","notifierNotifyActive","errorMessage","getNotifierPushHandler","pushRequestUsing","notifyCanceled","clearCanceled","flushCanceled","length","reset","isActive","subscriptionId","onUnsubscribeSucceedCanceled","notifierFlushCanceled","onUnsubscribeSucceedActive","subscribe","notifierReset","createUnsubscribeError","unsubscribeHandler","notifierNotifyCanceled","pushAbsintheUnsubscribeEvent","onSubscribeSucceed","subscribedNotifier","notifierNotifyStartEvent","onSubscribe","response","errors","gqlErrorsToString","onDataMessage","notifierNotifyResultEvent","dataMessageEventName","isDataMessage","setNotifierRequestStatusSent","onQueryOrMutationSucceed","pushQueryOrMutation","pushRequest","operationType"],"mappings":"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"}